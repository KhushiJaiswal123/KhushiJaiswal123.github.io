"0",""
"0","library(randomForest)"
"0",""
"0","### ~~~~ ~~~~ ~~~~ "
"0",""
"0","# HARDING CODING PARAMETERES"
"0",""
"0","# RForest_Model <- randomForest("
"0","#     price ~ distance_to_station + "
"0","#            water_company + "
"0","#            property_type + "
"0","#            whether_old_or_new + "
"0","#            freehold_or_leasehold + "
"0","#            latitude + "
"0","#            longitude + "
"0","#            total_floor_area + "
"0","#            number_habitable_rooms + "
"0","#            average_income + "
"0","#            london_zone + "
"0","#            co2_emissions_potential + "
"0","#            num_light_rail_lines + "
"0","#            energy_consumption_current + "
"0","#            energy_consumption_potential + "
"0","#            tenure,"
"0","#     data = train_data,    # Use the training dataset"
"0","#     ntree = 25,           # Number of trees"
"0","#     mtry = 3,             # Number of variables to sample at each split"
"0","#     maxnodes = 50,        # Limit the number of terminal nodes"
"0","#     nodesize = 2,         # Minimum number of observations in each node"
"0","#     importance = TRUE     # Calculate feature importance"
"0","# )"
"0","# print(RForest_Model) # Print the model output"
"0","# plot(RForest_Model) # Optional: Plot the error rate and other diagnostics"
"0","# varImpPlot(RForest_Model, scale =TRUE) # Optional: Variable Importance plot"
"0","# importance <- varImp(RForest_Model, scale=TRUE)"
"0","# plot(importance)"
"0",""
"0","### ~~~~ ~~~~ ~~~~ "
"0",""
"0","# FINDING THE BEST TUNING PARAMETERS "
"0",""
"0","# Set up cross-validation control"
"0","# train_control <- trainControl("
"0","#     method = ""cv"",              # Cross-validation method"
"0","#     number = 2,                 # Number of folds"
"0","#     verboseIter = TRUE,         # Show iteration details"
"0","#     savePredictions = 'all',    # Save all predictions"
"0","#     search = ""random""           # Random search for hyperparameters"
"0","# )"
"0","# # Fit random forest model with random search"
"0","# model4_RF_untuned <- train("
"0","#     price ~ water_company + "
"0","#            property_type + "
"0","#            freehold_or_leasehold + "
"0","#            latitude + "
"0","#            longitude + "
"0","#            total_floor_area + "
"0","#            co2_emissions_current + "
"0","#            average_income + "
"0","#            london_zone + "
"0","#            num_tube_lines + "
"0","#            windows_energy_eff + "
"0","#            altitude + "
"0","#            distance_to_station:london_zone + "
"0","#            property_type:total_floor_area + "
"0","#            distance_to_station + "
"0","#            number_habitable_rooms + "
"0","#            number_habitable_rooms:total_floor_area + "
"0","#            average_income:london_zone + "
"0","#            windows_energy_eff:energy_consumption_current + "
"0","#            freehold_or_leasehold:average_income + "
"0","#            district,"
"0","#     data = train_data, "
"0","#     method = ""ranger"","
"0","#     metric = ""RMSE"",            # Use RMSE for regression"
"0","#     trControl = train_control,"
"0","#     tuneLength = 10,"
"0","#     importance = 'permutation'  # Use permutation importance"
"0","# )"
"0","# # Print model summary"
"0","# print(model4_RF_untuned)"
"0","# # Get the best random forest model based on RMSE"
"0","# best_randomForest <- knn_fit$results[which.min(model4_RF$results$RMSE),]"
"0","# best_randomForest"
"0",""
"0",""
"0","### ~~~~ ~~~~ ~~~~ BEST MODEL ~~~~ ~~~~ ~~~~ ###"
"0",""
"0","# PAREMETERS HAVE BEEN TUNED "
"0",""
"0","# Set up cross-validation control"
"0","train_control <- trainControl("
"0","    method = ""cv"",              # Cross-validation method"
"0","    number = 2,                 # Number of folds"
"0","    verboseIter = TRUE,         # Show iteration details"
"0","    savePredictions = 'all',    # Save all predictions"
"0","    search = ""random""           # Random search for hyperparameters"
"0",")"
"0","# Define the tuning grid for the random forest model"
"0","tune_grid_rf <- expand.grid("
"0","    mtry = 39,                  # Hardcoded value for mtry"
"0","    min.node.size = 1,          # Hardcoded value for min.node.size"
"0","    splitrule = ""extratrees""    # Hardcoded value for splitrule"
"0",")"
"0","# Train the random forest model"
"0","model4_RF <- train("
"0","    price ~ water_company + "
"0","           property_type + "
"0","           freehold_or_leasehold + "
"0","           latitude + "
"0","           longitude + "
"0","           total_floor_area + "
"0","           co2_emissions_current + "
"0","           average_income + "
"0","           london_zone + "
"0","           num_tube_lines + "
"0","           windows_energy_eff + "
"0","           altitude + "
"0","           distance_to_station:london_zone + "
"0","           property_type:total_floor_area + "
"0","           distance_to_station + "
"0","           number_habitable_rooms + "
"0","           number_habitable_rooms:total_floor_area + "
"0","           average_income:london_zone + "
"0","           windows_energy_eff:energy_consumption_current + "
"0","           freehold_or_leasehold:average_income + "
"0","           district,"
"0","    data = train_data, "
"0","    method = ""ranger"","
"0","    metric = ""RMSE"",            # Use RMSE for regression"
"0","    trControl = train_control,"
"0","    tuneGrid = tune_grid_rf,    # Use the tuning grid"
"0","    importance = 'permutation', # Use permutation importance"
"0","    preProcess = c(""center"", ""scale"")  # Center and scale the data"
"0",")"
"1","+ Fold1: mtry=39, min.node.size=1, splitrule=extratrees"
"1"," "
"1","
"
"1","Growing trees.."
"1"," Progress: "
"1","75"
"1","%. Estimated remaining time: "
"1","10 seconds"
"1","."
"1","
"
"1","- Fold1: mtry=39, min.node.size=1, splitrule=extratrees"
"1"," "
"1","
"
"1","+ Fold2: mtry=39, min.node.size=1, splitrule=extratrees"
"1"," "
"1","
"
"1","- Fold2: mtry=39, min.node.size=1, splitrule=extratrees"
"1"," "
"1","
"
"1","Aggregating results
"
"1","Fitting"
"1"," "
"1","final model"
"1"," "
"1","on full training set
"
"1","Growing trees.."
"1"," Progress: "
"1","36"
"1","%. Estimated remaining time: "
"1","55 seconds"
"1","."
"1","
"
"1","Growing trees.."
"1"," Progress: "
"1","71"
"1","%. Estimated remaining time: "
"1","25 seconds"
"1","."
"1","
"
"1","Computing permutation importance.."
"1"," Progress: "
"1","85"
"1","%. Estimated remaining time: "
"1","5 seconds"
"1","."
"1","
"
"0","# Print model summary"
"0","print(model4_RF)"
"1","Random Forest"
"1"," "
"1","

"
"1","10498"
"1",""
"1"," samples"
"1","
"
"1","   16"
"1",""
"1"," predictor"
"1",""
"1","
"
"1","
"
"1","Pre-processing: centered (66), scaled (66)"
"1"," "
"1","
"
"1","Resampling:"
"1"," "
"1","Cross-Validated (2 fold)"
"1"," "
"1","
"
"1","Summary of sample sizes:"
"1"," "
"1","5249, 5249"
"1"," "
"1","
"
"1","Resampling results"
"1",":

"
"1",""
"1","  RMSE    "
"1","  Rsquared "
"1","  MAE     "
"1","
"
"1","  229231.8"
"1","  0.8151829"
"1","  100262.7"
"1","
"
"1","
"
"1","Tuning parameter 'mtry' was held constant at a value of 39
Tuning parameter 'splitrule' was held constant at a value
 of extratrees
Tuning parameter 'min.node.size' was held constant at a value of 1"
"1","
"
"1",""
"0","# Get the best random forest model based on RMSE"
"0","best_randomForest <- model4_RF$results[which.min(model4_RF$results$RMSE),]"
"0","best_randomForest"
